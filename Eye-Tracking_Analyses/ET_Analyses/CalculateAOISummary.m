function CalculateAOISummary(all_AOI_data)
% CalculateAOISummary Calculates summary of eye-tracking data based on the
% SMI BeGaze program summary data
%
%% Syntax
% CalculateAOISummary(AOI_array)
%
%% Description
% CalculateAOISummary gets a data array that contains all the eye-tracking
% data from SMI BeGaze and perfroms AOI analyses - correlation between children
% age and looking (multiple measures) at task-relevant areas; differences
% in looking between groups. Also prints the results.
%
% Required input arguments.
% all_AOI_data : MATLAB array containing all the SMI eye-tracking data
% (calculated in GetAOISummaryDataFromCSV)
%
%%
% Hard coded figure folder to save all figures generated by the function
figure_folder = fullfile('C:','Users','orios','Desktop','ESC Perception Paper','Figures_v4','SupportFigure');

% loads the valid subjects (ones that are included in the final set) and the children's ages
load('valid_subjects');
load('children_ages');

% gets the display information (conditions, actors, etc.)
[display_details_in_num, display_names, display_interval_times_in_ms] = GetESCDisplayMap();
display_interval_times_in_ms=[ones(size(display_interval_times_in_ms,1),1) display_interval_times_in_ms];

% Initialize AOI array
AOIs = {'Hammer';'Peg';'Dominant hand';'Non-dominant hand'; 'Face'};% 

% Initialize DVs array. These are ALL the DVs that SMI BeGaze is
% calculating. Some are conceptually overlap
measures={'percent_fixation','percent_net_dwel_times','percent_dwel_time','fixation_counts','revisits','glances_counts', ...
    'diversion_duration','glances_duration'};

% Initialize results array
AOI_res = [];    

% sets the colors for the figures (one for each group)
colors={'r','b'};

%% CALCULATES CORRELATION BETWEEN CHILDREN'S AGE AND EACH MEASURE (FIGURE 2B)
for measure_ix=[1 3 5]
    
    % initialize figure
    figure; 
    
    % gets the column number according to the measure index in the DVs array
    measures_col = measure_ix+7;
    
    % goes over both group (to calculate adults average as well) - group 1
    % are preschoolers, group 2 are adults
    for group=1:2
        
        % initialize group data arrays
        AOI_group_data = [];
        group_ages = [];
        
        % gets the subject numbers from each group as they appear in the
        % SMI BeGaze program
        group_subjs = unique(all_AOI_data(all_AOI_data(:,1)==group-1,2));
        
        % go over each subject in the grou
        for s_ix=1:length(group_subjs)    
            
            % gets subject numbers
            s_num = group_subjs(s_ix);
            
            % if the subject number is not included in the valid subject
            % array - skip it
            if (~ismember(s_num,valid_subjects(:,1)))
               continue;
            end
            
            % focus only on task-relevant AOIs (in our study - hammer, peg, acting hand)
            AOI = [1 2 3];
            
            % gets the valid trial numbers 
            trials =  unique(all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & ismember(all_AOI_data(:,5),AOI),4));
            
            % gets the trials data
            s_trials_data =  all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & ismember(all_AOI_data(:,5),AOI), [4 measures_col]);
            
            % initialize subject data array
            s_data = [];
            
            % go over all trials and add the summary for each trial
            for trial_ix=1:length(trials)
                s_data = [s_data ; sum(s_trials_data(s_trials_data(:,1)==trials(trial_ix),2))];
            end
            
            % adds the mean of the subject across all trials to the array
            % comparing the groups
            AOI_group_data = [AOI_group_data; mean(s_data)];
            
            % only relevant to the preschoolers group - adds the child age
            if (group==1)
                group_ages = [group_ages; children_ages(children_ages(:,1)==s_num,2)];
            end
        end
        
        % after going over all subjects - prints scatter plots of the
        % children's looking measures at task-relevant areas vs. their age
        if (group==1)
            scatter(group_ages,AOI_group_data,100,colors{group},'MarkerFaceColor',[45 168 45]/255,'MarkerEdgeColor',[0 0 0]);
            hold on
            [r,p]=corrcoef(group_ages,AOI_group_data)
            title([measures{measure_ix} ' | r=' num2str(r(2)) ' | p=' num2str(p(2))]);
            
        % in case of adults - prints the average in a different color (a
        % line in the paper's figure)
        else
            scatter(5.5,mean(AOI_group_data),colors{group});
        end
        hold on
    end
    
    % rescaling the x-axis according to children's age and saves the figure
    % in EPS and PNG formats
    xlim([3 5.5]);
    figure_file_name = fullfile(figure_folder,[measures{measure_ix} '_correlation_with_age']);
    saveas(gcf, figure_file_name,'epsc');
    saveas(gcf, figure_file_name,'png');
    close all;
end

%% CALCULATES COMPARISONS BETWEEN GROUPS
% going over each measure
for measure_ix=[1 3 5]
    
    % initialize a figure for group comparison
    figure;
    
    % gets the column of the measures according to its location in the DVs array
    measures_col = measure_ix+7;
    
    % go over each AOI (combines the last 2 AOIs because these are
    % non-relevant AOIs and looking was calculated together
    for AOI=1:length(AOIs)-1
        
        % go over each grou
        for group=1:2
            
            % Initialize the group data array
            AOI_group_data = [];
            
            % gets the subjects in the group
            group_subjs = unique(all_AOI_data(all_AOI_data(:,1)==group-1,2));
            
            % go over each subject in the group
            for s_ix=1:length(group_subjs)    
                
                % gets the subject number
                s_num = group_subjs(s_ix);
                
                % if this is not a valid subject - skip
                if (~ismember(s_num,valid_subjects(:,1)))
                   continue;
                end
                
                % face and non-dominand are calculated together as
                % "non-task-relevant areas
                if (AOI==4) 
                    trials =  unique(all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & (all_AOI_data(:,5)==AOI | all_AOI_data(:,5)==AOI+1),4));
                    s_trials_data =  all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & (all_AOI_data(:,5)==AOI | all_AOI_data(:,5)==AOI+1), [4 measures_col]);
                else
                    trials =  unique(all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & all_AOI_data(:,5)==AOI,4));
                    s_trials_data =  all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & all_AOI_data(:,5)==AOI, [4 measures_col]);
                end
                
                % calculates the measure per trial for the subject
                s_data = [];
                for trial_ix=1:length(trials)
                    s_data = [s_data ; sum(s_trials_data(s_trials_data(:,1)==trials(trial_ix),2))];
                end
                
                % average all the trials for the subject and adds to group
                % array
                AOI_group_data = [AOI_group_data; mean(s_data)];
            end
        end
        
        % creates a subplot with group data
        subplot(1,4,AOI);
          
        % Creates the bubble plot, comparing the groups in each AOI for the
        % specific neasure
         scatter(ones(size(sig_data,1),1),sig_data(:,1),'r','filled');
         hold on
         scatter(2*ones(size(sig_data,1),1),sig_data(:,2),'k','filled');
        title(['p = ' num2str(p)]);
        limit=max(max(sig_data));
    %    ylim([0 4]);
        xlim([0 3]);
    end
    
    % saves the figure to the figures path
    figure_file_name = fullfile(figure_folder,[measures{measure_ix} '_adults_children_diff']);
    saveas(gcf, [figure_file_name '.eps'],'epsc');
    saveas(gcf, [figure_file_name '.png'],'png');
    close all;
end

%% Calculates statistics to use in SPSS - this is per measure

% initialize stats array 
looking_stats = [];

% go over the measures to calculate stats - each measures gets a file for SPSS
for measure_ix=[1 3 5]
    
% gets the relevant column in the data array 
measures_col = measure_ix+7;  

% go over AOIs
for AOI=1:length(AOIs)
    
    % go over each grou
    for group=1:2
        
        % gets the subject numbers for that group
        group_subjs = unique(all_AOI_data(all_AOI_data(:,1)==group-1,2));
        
        % go over the subjects
        for s_ix=1:length(group_subjs)
            
            % gets the subject number from the group subjects
            s_num = group_subjs(s_ix);
            
            % if this is not a valid subject - skip
            if (~ismember(s_num,valid_subjects(:,1)))
               continue;
            end
            
            % calculates stats for condition 1 and 3 only - these are the
            % efficient and inefficient videos (not necessary in our study
            % because the data was initially exported from BeGaze for these videos
            % only)
            for cond=[1 3]
                
                % extract the trials of the condition
                trials =  unique(all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & all_AOI_data(:,5)==AOI & all_AOI_data(:,7)==cond,4));
                
                % extracts the trial data
                s_trials_data =  all_AOI_data(all_AOI_data(:,2)==group_subjs(s_ix) & all_AOI_data(:,5)==AOI & all_AOI_data(:,7)==cond, [4 measures_col]);
                
                % sum the measure for the trial
                s_data = [];
                for trial_ix=1:length(trials)
                    s_data = [s_data ; sum(s_trials_data(s_trials_data(:,1)==trials(trial_ix),2))];
                end
                
                % insert the measure number with the group, condtion, and
                % AOI to calculate ANOVA in SPSS
                looking_stats = [looking_stats; group cond AOI mean(s_data)];
            end
        end
    end
end

% saves the data to use later in SPSS (saves as MAT file, but should be
% translated to CSV manually for SPSS use 
save(['data_for_SPSS_ ' measures{measure_ix} '.mat'], looking_stats);
end